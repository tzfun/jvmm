repositories {
    mavenCentral()
}

dependencies {
    compile(project(':convey'))
    compile(project(':core'))
    compile(project(':logger'))
}

def resourcesPath = 'src/main/resources'

task clearResourcesPath(type: Delete) {
    delete {
        File f = file(resourcesPath)
        if(f != null && f.exists()) {
            f.list().each { delete "${resourcesPath}/${it}" }
        }
    }
}

tasks.clean.configure {
    dependsOn clearResourcesPath
}

tasks.compileJava.configure {
    dependsOn project(':agent').tasks.jar, project(':server').tasks.jar, clearResourcesPath

    doLast {

        println("copy agent & server jar file to resources")
        copy {
            from '../agent/build/libs/jvmm-agent.jar'
            into resourcesPath
        }

        println("unzip jvmm-server.jar and copy files")
        copy {
            def zipFile = file('../server/build/libs/jvmm-server.jar')
            def targetDir = file(resourcesPath + '/server-source')
            FileTree fileTree = zipTree(zipFile).matching {
                include 'config.yml'
                include 'jvmm-logger.jar'
                include 'module-info.class'
                include 'org/beifengtz/jvmm/server/**'
                include 'org/yaml/**'
                include 'META-INF/INDEX.LIST'
                include 'META-INF/MANIFEST.MF'
            }
            from fileTree
            into targetDir
        }

        println("write jvmm version file")
        file(resourcesPath + '/version.txt').withWriter("UTF-8") { it.write(rootProject.version) }
    }
}

jar {
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'

    def jarName = "jvmm.jar"
    archiveName(jarName)
    manifest {
        attributes 'Main-Class': 'org.beifengtz.jvmm.client.ClientApplication'
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    doLast {
        def targetDir = "${rootProject.rootDir}/bin/jvmm-${rootProject.version}"
        copy {
            println("copy ${jarName} to ${targetDir}")
            from "${project.buildDir}/libs/${jarName}", "${project.buildDir}/resources/main/attach", "${project.buildDir}/resources/main/attach.bat"
            into targetDir
        }
    }
}
