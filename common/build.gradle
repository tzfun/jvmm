plugins {
    id 'java'
    id 'application'
}

ext.projectName = 'jvmm-common'
archivesBaseName = "jvmm-common"

group = rootProject.group
version = rootProject.version

apply plugin: 'application'

dependencies {
    compile "com.google.code.gson:gson:${gsonVersoion}"
    compile "io.netty:netty-common:${nettyVersion}"
    compile "io.netty:netty-handler:${nettyVersion}"
}

task writeVersionFile() {
    def file = file('src/main/resources/version.txt')
    file.deleteOnExit()
    file.createNewFile()
    file.write("${version}")
}

tasks.compileJava.configure {
    dependsOn writeVersionFile
}

jar {
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'

    archiveName("${projectName}.jar")
}

javadoc {
    options.addStringOption("charset", "UTF-8")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveName("${projectName}-sources.jar")
    getArchiveClassifier().set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type:Jar) {
    from javadoc
    getArchiveClassifier().set('javadoc')
}

tasks.jar.configure {
    dependsOn sourcesJar
}

artifacts {
    archives sourcesJar, javadocJar
}

if(env == 'publish') {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name projectName
                    packaging 'jar'
                    description 'Provides access to operating system, process, thread and other information during Java runtime.'
                    url 'https://github.com/tzfun/jvmm'

                    scm {
                        url = 'https://github.com/tzfun/jvmm'
                        connection = 'scm:git:git://github.com/tzfun/jvmm.git'
                        developerConnection = 'scm:git:ssh://git@github.com/tzfun/jvmm.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name 'beifengtz'
                            email 'beifengtz@163.com'
                        }
                    }
                }
            }
        }
    }

    signing {
        sign configurations.archives
    }
}
